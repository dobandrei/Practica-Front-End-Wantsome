- garbage collection - eficienta folosirii CONST sau LET in locul la VAR (memoria e mai libera)
- scope pollution - cand sunt exagerat de multe variabile in memorie, facut cu VAR
- block scoped - este LET si CONST, isi pastreaza valoarea doar in If/Else/Switch
- function scoped - este VAR
- sugar sintax - apelarea unei expresii din js6, mai putine linii de cod, aceeasi functionalitate ca in js5. Transcrierea pentru browsere o face transpiler-ul
- transpiler - program care modifica JS6 in JS5 pentru browserele care nu au inca implementat
- hoisting - intuitia programului js care declara automat variabilele, cu undifined, daca este apelata inainte de a fi declarata efectiv si atribuita valoarea
- 'use strict' - notifica cazurile de hoistings si da eroarea ca variabila/functia nu a fost declarata
- closure - javascript pastreaza functionalitatea functiilor cu toate variabilele din ele si pot fi folosite ulterior,la o functie care are return o alta functie, iar la fiecare apelare a functiei se schimba variabila locala
- ternary operator -  IF si ELSE scris cu ? si :
- Arrow function => inlocuieste return intr-o functie, A NU SE FOLOSI IN INTERIORUL OBIECTELOR, deoarece .this nu mai merge, nu mai poti ajunge la keys
- Object.freeze({}) - creeaza un obiect care nu poate fi schimbat, obiectul creat cu const poate fi schimbat
- String Literals (din ES6) - concatenarea stringurilor cu $ (exemplu return `${name} stringNOU ${surname}`)
- ...spread - se foloseste cand apelezi o functie sau in interiorul array-urilor sau a obiectelor
- ...rest - se foloseste ca perimetru in functie.
- programare functionala  - sta la baza imutabilitatii (functiile .map .reduce .filter nu schimba array-uk initial)

1) What is JS?

- limbaj de programare (salscripting)
- interactioneaza cu Html si CSS, pentru a oferi functionalitate
- ruleaza in browserul clientului
- are mai multe modalitati de a fi inclus intr-o pagina HTML (inline,internal si external)
- poate fi inclus la orice linie Html, dar de preferat la urma (deoarece JS este blocant)
- poate fi inclus in head cand se foloseste de resurse GPS prioritare
- este un program de programare compilat si interpretat (se activeaza si lucreaza dinamic, odata cu browserul)

2) Diferente fata de Java ?
- ambele sunt limbaje de programare, dar sunt diferite
- Java este necompilat , trebuie facut build in binar ca sa fie executat

3) Ce este Window?
- obiectul global, care sta la baza interactiunii cu DOM-ul
- aici apar variabilele globale
- e root-ul la prototype chain

4) Ce este undifined ?
- este un tip de data
- valoarea standard a unei variabile care a fost declarata, dar care nu i-a fost asociata o valoare
- valoarea default a unei functii

5) Ce este null si cum se deosebeste de undifined?
- alt tip de data
- inseamna "gol", e valoare care o poti atribui unei variabile ca sa nu fie undefined
- o folosim ca sa putem rula programul JS, si sa nu apara eroarea "something is undefined"

6) Cu aplicam Events ?
a) in script document.addEventListener("click",fn) aici este (eventHandler, callBack, valoare Bubbling)
b) ca atribut Html, inline - onclick : fn()
c) element.onclick = fn();

7) Ce este Event Bubling?
- face parte din event Flow 
- poate fi oprit cu event.propagation, dupa ce se activeaza Event Target (butonul)
- alt concept ar fi event Captchering, daca se scrie True la a 3-a valoare cand cream Eventul

8) Diferenta dintre for si forEach?
- forEach este din programare functionala - asemenea lui map, reduce, filter
- for este din programare procedurala (primitiva)

9) Ce este programarea functionala
- paradigma de programare
- imutability (se evita side effects)
- foloseste pure functions
- permite high order functions ( functie care are ca parametru alta functie si asa mai departe)

10) IIFE 
- varianta veche de creare a modulelor
- se declara un modul pe care il apelezi prin autoapel
- IIFE incapsuleaza librarii
- face scoping la ce vom folosi mai tarziu in program
- functioneaza la toate browsere, inclusiv cele vechi

11) Cum golesti un array:
- pop() sau array.length = array.length - 1;
- unshift()
- il redeclari = gol []
- splice (0,array.length)
- array.length = 0

12) Ce este o functie "callback"?
- este o functie care se apeleaza cu intarziere, dupa executia unei secvente de cod/operatii asincrone (exemplu server response)
- o folosim daca avem nevoie de server response, la evenimente
- nu este recomandat sa fie folosit in nesting, deoarece se creeaza un "callback hell"
- de preferat sa se foloseasca "Promise Chain"(e mai clean, mai gradual, mai usor de inteles).then.then

13) Cum faci inheritance?
- extend => folosim si "super"
- object.prototype 

14) Ce da 15 + 6 + "2" = "212"
- se face adunare 21
- apoi se face concatenare de string

15) Ce da "3" - 1 = Nan

16) Poti folose "delete" in Javascript ?
- DA, poti sterge o proprietate (key) a unui obiect

17) CI/CD 
- Continuous Integration
- Continuous Delivery

18) Ce este Lazy loading
- pozele se incarca odata cu browserul
- se foloseste pentru optimizare

19) Ce sunt progresive web apps?
- aplicatii care se deschid fara internet

20) CSS - cate tipuri de position sunt :
- relative - se orientaza in functie de primul parinte care are tot position : relative
- absolut
- fixe
- sticky
- static

21) CSS - cate tipuri de display sunt:
- none - scoate elementul din DOM , il sterge ( exista visibility : hidden care doar asculde elementul, dar nu-l sterge din DOM)
- block - (anumite tag-uri au ca defauld block : paragraf, h1, h2...) - ocupa intreaga linie
- inline - (exemple : span, b, em)
- inline-block - elementul ramane inline, dar ii putem da width si height
- initial - face overwrite la optiunile mai sus mentionate
- inherit - mosteneste de la parinte tipul de display
- flex - o solutie pentru float, care era foarte greoi, si lucreaza doar pe o axa, ori row ori column
- grid - lucrezi bidimensional cu el in acelasi timp

22) Box model
- este spatiul pe care il ocupa fiecare element : content, padding, border, margins

23) Criteriile de specificitate la CSS :
a) important
b) inline - cand scrii CSS din Javascript, acesta se scrie inline, cu importanta primara
c) ID
d) class / atributele / pseudo-clasele
e) elementele
f) pseudo-elementele


Technical skills gained : 
communication competences
organizational competences
skills acquired in the workplace
computer skills
other competences
hobby
Skills : HTML, CSS (flex, grid systems), Javascript (Closures, Async, Promises, XMLHtpRequest, localStorage,
sessionStorage, Callbaks, ES6, modules), HTTP, Chrome DevTools, React intro (npm, webpack, components, props,
state management).
attention to details
creativity
communication skills
teamwork
